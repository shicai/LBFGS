#ifndef _HIK_IPA_TPR_DAE_KERNEL_H_
#define _HIK_IPA_TPR_DAE_KERNEL_H_

#ifndef _HIK_IPA_TPR_DAE_GENERICS_H_
#include "cuda_generics.h"
#endif

#ifndef _HIK_IPA_TPR_DAE_KERNEL_H_
#include "kernel.h"
#endif

#ifndef _HIK_IPA_TPR_DAE_UTILS_H_
#include "utils.h"
#endif


/***********************************************************************************************************************
* 功　能:   double类型原子加法
* 参　数:   address     - I/O   double数据指针
* 　　　    val         - I     double数据
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ void atomicAdd(double *address, double val);

/***********************************************************************************************************************
* 功　能:   float类型原子求最大
* 参　数:   address     - I/O   float数据指针
* 　　　    val         - I     float数据
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ void atomicMax(float *address, float val);

/***********************************************************************************************************************
* 功　能:   double类型原子求最大
* 参　数:   address     - I/O   double数据指针
* 　　　    val         - I     double数据
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ void atomicMax(double *address, double val);

/***********************************************************************************************************************
* 功　能:   float类型原子求最小
* 参　数:   address     - I/O   float数据指针
* 　　　    val         - I     float数据
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ void atomicMin(float *address, float val);

/***********************************************************************************************************************
* 功　能:   double类型原子求最小
* 参　数:   address     - I/O   double数据指针
* 　　　    val         - I     double数据
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ void atomicMin(double *address, double val);

/***********************************************************************************************************************
* 功　能:   设置方阵对角元素为1
* 参　数:   x           - I     数据方阵, n * n
* 　　　    n           - I     行数或列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_identity(real *x, int n);

/***********************************************************************************************************************
* 功　能:   设置向量为某个数值
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_setval(real *x, real val, int n);

/***********************************************************************************************************************
* 功　能:   设置向量为另外一个向量的某个倍数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_setvec(real *x, const real *y, real alpha, int n);

/***********************************************************************************************************************
* 功　能:   设置向量为其自身和另外一个向量点乘积的某个倍数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_setprod(real *x, const real *y, real alpha, int n);

/***********************************************************************************************************************
* 功　能:   [a, b]均匀分布随机数，将cuda_randu生成的均匀分布随机数线性映射到[a, b]区间
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 　　　    a           - I     均匀分布下边界
* 　　　    b           - I     均匀分布上边界
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_randuab(real *x, int n, real a, real b);

/***********************************************************************************************************************
* 功　能:   Block，向量累加值, sx = sum(data)
* 参　数:   data        - I     数据向量
* 　　　    sx          - O     累加值
* 　　　    n           - I     数组大小
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_blocksum(const real *data, real *sx, int n);

/***********************************************************************************************************************
* 功　能:   Block，向量均值, mx = mean(x)
* 参　数:   data        - I     数据向量
* 　　　    sx          - O     均值
* 　　　    n           - I     数组大小
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_blockmean(const real *data, real *sx, int n);

/***********************************************************************************************************************
* 功　能:   向量最小值, val = min(data)
* 参　数:   data        - I     数据向量
* 　　　    val         - O     最小值
* 　　　    n           - I     数组大小
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_vecmin(const real *data, real *val, int n);

/***********************************************************************************************************************
* 功　能:   向量最大值, val = max(data)
* 参　数:   data        - I     数据向量
* 　　　    val         - O     最大值
* 　　　    n           - I     数组大小
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_vecmax(const real *data, real *val, int n);

/***********************************************************************************************************************
* 功　能:   矩阵列均值, mx = mean(X, 1)
* 参　数:   X           - I     矩阵数据
* 　　　    mx          - O     均值，行向量
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matmeanc(real *X, real *mx, int m, int n);

/***********************************************************************************************************************
* 功　能:   矩阵行均值, mx = mean(X, 2)
* 参　数:   X           - I     矩阵数据
* 　　　    mx          - O     均值，列向量
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matmeanr(real *X, real *mx, int m, int n);

/***********************************************************************************************************************
* 功　能:   矩阵每列最大值的索引
* 参　数:   X           - I     矩阵数据
* 　　　    idx         - O     均值，列向量
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matmaxidc(real *X, real *idx, int m, int n);

/***********************************************************************************************************************
* 功　能:   矩阵每个元素增加一个标量值, X = X + val
* 参　数:   X           - I     矩阵数据
* 　　　    val         - I     累加值
* 　　　    n           - I     矩阵列数*矩阵行数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matinc(real *X, real val, int n);

/***********************************************************************************************************************
* 功　能:   计算矩阵每个元素的指数幂, X = alpha * exp(beta * X + gamma)
* 参　数:   X           - I     矩阵数据
* 　　　    alpha       - I     系数
* 　　　    beta        - I     系数
* 　　　    gamma       - I     系数
* 　　　    n           - I     矩阵列数*矩阵行数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matexp(real *X, real alpha, real beta, real gamma, int n);

/***********************************************************************************************************************
* 功　能:   矩阵按列累加, sx = sum(X, 1)
* 参　数:   X           - I     矩阵数据
* 　　　    sx          - O     累加值，行向量
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matsumc(real *X, real *sx, int m, int n);

/***********************************************************************************************************************
* 功　能:   矩阵按行累加, mx = sum(X, 2)
* 参　数:   X           - I     矩阵数据
* 　　　    sx          - O     累加值，列向量
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matsumr(real *X, real *sx, int m, int n);

/***********************************************************************************************************************
* 功　能:   矩阵自平方后按列累加, sx = sum(X.^2, 1)
* 参　数:   X           - I     矩阵数据
* 　　　    sx          - O     累加值，行向量
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matsqsumc(real *X, real *sx, int m, int n);

/***********************************************************************************************************************
* 功　能:   CUBLAS向量加权求和, z = alpha * x + beta * y
* 参　数:   x           - I     数据向量, n * 1
* 　　　    y           - I     数据向量, n * 1
* 　　　    z           - I     结果向量, n * 1
* 　　　    alpha       - I     x向量系数
* 　　　    beta        - I     y向量系数
* 　　　    n           - I     数据维度
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_vecadd(const real *x, const real *y, real *z, real alpha, real beta, int n);

/***********************************************************************************************************************
* 功　能:   CUBLAS矩阵每列加偏移向量, A = A + repmat(x, 1, n) = A + x * ones(1, n)
* 参　数:   A           - I     数据矩阵, m * n
* 　　　    x           - I     偏移列向量，m * 1
* 　　　    m           - I     X矩阵行数
* 　　　    n           - I     X矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_reppluscol(real *A, const real *x, real alpha, int m, int n);
__global__ void cuda_repplusrow(real *A, const real *x, real alpha, int m, int n);

/***********************************************************************************************************************
* 功　能:   矩阵减法, Z = X - Y
* 参　数:   X           - I     矩阵数据
* 　　　    Y           - I     矩阵数据
* 　　　    Z           - O     结果数据
* 　　　    n           - I     矩阵行数*矩阵列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matminus(real *X, real *Y, real *Z, int n);

/***********************************************************************************************************************
* 功　能:   矩阵元素乘法(Hadamard/Entrywise Product), Z = X .* Y
* 参　数:   X           - I     矩阵数据
* 　　　    Y           - I     矩阵数据
* 　　　    Z           - I     结果数据
* 　　　    m           - I     矩阵行数
* 　　　    n           - I     矩阵行数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_matprod(real *X, real *Y, real *Z, int n);

/***********************************************************************************************************************
* 功　能:   CUDA KL Divergence函数
* 参　数:   r           - I     数据
* 　　　    rh          - I     数据
* 　　　    rho         - I     rh组成的数组
* 　　　    grad        - I     KL Gradient
* 　　　    n           - I     数据维度
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ real kl_div(real r, real rh);
__global__ void cuda_kldiv(real *rho, real r, int n);
__global__ void cuda_klgrad(real *rho, real *grad, real r, int n);

/***********************************************************************************************************************
* 功　能:   CUDA SIGMOID函数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ real sigmoid(real x);
__device__ real sigmoid_grad(real x);
__global__ void cuda_sigmoid(real *x, real *y, int n);
__global__ void cuda_sigmoid_grad(real *x, real *y, int n);

/***********************************************************************************************************************
* 功　能:   CUDA TANH函数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O    空
***********************************************************************************************************************/
__device__ real tanh_grad(real x);
__global__ void cuda_tanh(real *x, real *y, int n);
__global__ void cuda_tanh_grad(real *x, real *y, int n);

/***********************************************************************************************************************
* 功　能:   CUDA SOFTPLUS函数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ real softplus(real x);
__global__ void cuda_softplus(real *x, real *y, int n);
__global__ void cuda_softplus_grad(real *x, real *y, int n);

/***********************************************************************************************************************
* 功　能:   CUDA LINEAR函数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ real linear_act(real x);
__device__ real linear_grad(real x);
__global__ void cuda_linear(real *x, real *y, int n);
__global__ void cuda_linear_grad(real *x, real *y, int n);

/***********************************************************************************************************************
* 功　能:   CUDA RELU函数
* 参　数:   x           - I     数据列向量, n * 1
* 　　　    y           - I     数据列向量, n * 1
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__device__ real relu(real x);
__device__ real relu_grad(real x);
__global__ void cuda_relu(real *x, real *y, int n);
__global__ void cuda_relu_grad(real *x, real *y, int n);

/***********************************************************************************************************************
* 功　能:   计算sotmax数据拟合误差
* 参　数:   probx       - I     数据矩阵, m x n
* 　　　    labels      - I     数据标签, 1 x n
* 　　　    J_fit       - I     误差, 标量值
* 　　　    m           - I     行数
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_softmax_fit(real *probx, real *labels, real *J_fit, int m, int n);

/***********************************************************************************************************************
* 功　能:   计算sotmax标签概率误差
* 参　数:   probx       - I     概率矩阵, m x n
* 　　　    labels      - I     数据标签, 1 x n
* 　　　    m           - I     行数
* 　　　    n           - I     列数
* 返回值:               - O     空
***********************************************************************************************************************/
__global__ void cuda_softmax_err(real *probx, real *labels, int m, int n);

/***********************************************************************************************************************
* 功　能:   CUDA的sum reduction
* 参　数:   size        - I     数据维度
* 　　　    threads     - I     Thread数量
* 　　　    blocks      - I     Block数量
* 　　　    data        - I     数据
* 　　　    sum_data    - O     返回partial sum值
* 返回值:               - O     空
***********************************************************************************************************************/
void reduce(int size, int threads, int blocks, const real *data, real *sum_data);

#endif // _HIK_IPA_TPR_DAE_KERNEL_H_